#include <bits/stdc++.h>
#include <iostream>
using namespace std;

// Multiple Parenthesis problem
bool isbalanced(string exp)
{
    stack<char> s;
    char x;

    for (int i = 0; i < exp.length(); i++)
    {
        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[')
            s.push(exp[i]);

        if (s.empty())
        {
            return false;
        }

        switch (exp[i])
        {
        case ')':
            x = s.top();
            s.pop();
            if (exp[i] == '}' || exp[i] == ']')
                return false;
            break;

        case '}':
            x = s.top();
            s.pop();
            if (exp[i] == ')' || exp[i] == ']')
                return false;
            break;

        case ']':
            x = s.top();
            s.pop();
            if (exp[i] == ')' || exp[i] == '}')
                return false;
            break;
        }
    }

    return (s.empty());
}

// is ab is balance or not

bool is_a_b_balanced(string exp)
{
    stack<char> s;
    char x;

    for (int i = 0; i < exp.length(); i++)
    {
        if (exp[i] == 'a')
        {
            s.push(exp[i]);
        }
        if (s.empty())
        {
            return false;
        }
        if(exp[i] == 'b'){
            x = s.top();
            s.pop();
        }
    }
    return (s.empty());
}

int main()
{

    //Creating a Stack
    stack<char> s1;

    //pushing a Stack
    s1.push('a');
    s1.push('p');
    s1.push('p');
    s1.push('l');
    s1.push('e');

    //size of stack
    int len = s1.size();
    cout << "len of stack:" << len << endl;

    //printing a Stack /fetching a stack
    //(top to bottom)
    while (!s1.empty())
    {
        cout << s1.top() << '\t';
        s1.pop();
    }
    cout << endl;

    //MUltiple parenthesis checking problem
    string exp = "( { [ ] } ) ]";
    if (isbalanced(exp))
    {
        cout << "Balanced:" << exp << endl;
    }
    else
    {
        cout << "Not balanced:" << exp << endl;
    }

    stack<int> s2;

    s2.push(10);
    s2.push(20);
    s2.push(30);
    s2.push(400);
    s2.push(100);

    cout << "top:" << s2.top() << endl;
    s2.pop();

    while (!s2.empty())
    {
        cout << "s2.pop() : " << s2.top() << " | " << '\t';
        s2.pop();
    }
    cout << endl;

    int len2 = s2.size();
    cout << "len2 : " << len2 << endl;

    //abababa ->ababa->aba->a   || problem Statement

    string str = "abababaa";

    if(is_a_b_balanced(str))
    {
        cout << "Balanced a_b : " << str << endl;
    }
    else
    {
        cout << "Not Balanced a_b : " << str << endl;
    }

    return 0;
}
